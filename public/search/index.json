[{"content":" # 关键字 Go共有25个保留关键字：\n# 包管理（2个）： # import 用于导入包，这样就可以使用包中被导出的标识符。导入格式如下：\n1 2 3 4 import \u0026#34;fmt\u0026#34; //直接import import f \u0026#34;fmt\u0026#34; //添加包别名 import . \u0026#34;fmt\u0026#34; //代表导入包，使用时不用加包名 import _ \u0026#34;fmt\u0026#34; //不使用包中的标识符，只需要包的副作用（init函数，包级变量...） # package 用于声明包的名称，需放在go文件所有代码的最前面。一个包由一个或多个go源文件组成，需放在同一个目录下，且同一个目录下的这些go文件的package的名字只能有一个，且不能为\u0026quot;_\u0026quot;。 package \u0026lt;packagename\u0026gt;\n# 程序实体声明与定义（8个）： # chan 用于声明channel（信道）。信道提供一种机制使两个并发执行的函数实现同步，并通过传递具体元素类型的值来通信。\n1 2 3 chan T // 可以被用来发送和接收类型T的值 chan\u0026lt;- T // 只能被用来发送浮点数 \u0026lt;-chan T // 只能被用来接收整数 # const 用于定义常量，一旦创建，不可赋值修改\n# func func 用于定义函数。Go函数支持可变参数且返回值支持多个，但不支持默认参数。如果函数存在多个返回值形参则需要使用小括号括起来，定义格式如下：\n1 2 3 func funcName(){} //无参无返回值 func funcName(t T) T {} //有参有返回值 func funcName(t T, list ...T) (T1,T1) {} //有变参有多个返回值 # interface interface 用于定义接口。一个接口是一个方法集，如果一个类型实现了一个接口中的所有方法集，那么说明该类型实现此接口。接口类型变量可以存储任何实现了该接口的类型的值。特别的，interface{}表示空接口类型，默认地，所有类型均实现了空接口，所以interface{}可以接收任意类型值。\n# map map 用于声明映射变量。映射属容器类类型，是一个同种类型元素的无序组，通过唯一的键可以获取对应的值。可以使用 make 创建 map 变量，在定义 map 时可以省略容量，超出容量时会自动扩容，但尽量提供一个合理的初始值。未初始化的值为 nil。\n# struct struct 用于定义结构体。结构体属容器类型，是多个相同或不同类型值的集合 。一个结构体的零值是类型集合中所有类型的零值。\n# type type 用于定义类型，比如定义 struct、interface、func 与等价类型。\n# var var 用于申明函数级变量和包级变量。 程序流程控制（15个）：\n# 循环 for range for 是 Go 中唯一用于循环结构的关键词, 有三种使用方式：1. 单条件 2. 循环变量 3 range\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // for 单条件用法 相当于while i := 0 for i \u0026lt; 10 { fmt.Println(i) i++ } // for 循环变量 for i := 0; i \u0026lt; 10; i++ { fmt.Println(i) } // for range 用法 s := []int{1, 2, 3} for i, v := range s { fmt.Println(i, v) } break continue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // break 跳出本次循环 for i := 0; i \u0026lt; 10; i++ { if i == 5 { break } fmt.Println(i) } // continue 跳过本次循环 for i := 0; i \u0026lt; 10; i++ { if i == 5 { continue } fmt.Println(i) } 条件语句\nif else else if if i == 1 { fmt.Println(\u0026ldquo;i == 1\u0026rdquo;) } else if i == 2 { fmt.Println(\u0026ldquo;i == 2\u0026rdquo;) } else { fmt.Println(\u0026ldquo;i != 1 \u0026amp;\u0026amp; i != 2\u0026rdquo;) }\nswitch default case switch i { case 1: fmt.Println(\u0026ldquo;i == 1\u0026rdquo;) case 2: fmt.Println(\u0026ldquo;i == 2\u0026rdquo;) default: fmt.Println(\u0026ldquo;i != 1 \u0026amp;\u0026amp; i != 2\u0026rdquo;) } 跳转控制\nreturn\ndefer\ngoto 并发控制\ngo\nselect\n","date":"2024-03-29T15:54:28+08:00","permalink":"http://localhost:1313/p/golang/","title":"Golang学习-关键字"}]